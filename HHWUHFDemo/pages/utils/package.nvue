<template>
<text class="line">package</text>
<view class="scroll-Y">
	 <text>{{ epc }}</text>
 </view>
 <text class="line">Details</text>
 <view class="ctx-scroll-Y">
	 <text>package write tag result {{ packageResult }}</text>
  </view>
 
 <view class="btn-box">
 	<button type="primary" @click="inventory()" style="flex: 3;">{{ page_state.btn1Info }}</button>
 </view>
</template>

<script setup>
	import {
		reactive, ref, onMounted 
	} from 'vue'
	
	import {
		onLoad,
		onShow,
		onHide,
		onBackPress,
	} from "@dcloudio/uni-app"
	
	const page_state = reactive({
		btn1Info: "開始掃描",
		tagsAmount: 0, 
		btn2Disabled: false, 
		btn3Disabled: false, 
		cbDisabled: false, 
		dataList: [] 
	})
	
	const ctx_item = ref([])
	
	var main = plus.android.runtimeMainActivity()
	var hhwUHFController = getApp().globalData.hhwUHFController
	var globalEvent = getApp().globalData.globalEvent
	
	var pageNum = 100
	var offset = 50
	var epcList = []
	var tempList = []
	
	// var async_flag = false
	var voice_flag = false
	
	var keyDownTime = 1;
	var barcode_flag = false;
	
	var socketTask;
	
	const action = ref('')
	
	const rfidEventHandler = async () => {

		if(page_state.dataList.length > 0) {
			return 
		}
		var result = e.tag_info_list
		if (result == null) {
			var event = e.inventory_event
			if (event == "stopInventory") {
				uni.showToast({
					title: "stop",
					icon: "none"
				})
				page_state.btn2Disabled = false
				page_state.btn3Disabled = false
				page_state.cbDisabled = false
				page_state.btn1Info = "開始掃描"
			}
			return
		}
		
		if(result.length > 1){
			page_state.dataList = []
			uni.showToast({
				title: "There are too many labels, please rescan",
				icon: "none",
				duration: 3000
			})
			return
		}
		
		for (var i = 0; i < 1; i++) {
			var id = i
			var epc = bytes2HexString(result[i].EpcId)
			var rssi = result[i].RSSI 
			var tag = {
				id: id,
				epc: epc,
				count: 1,
				rssi: rssi,
			}
			var index = epcList.indexOf(epc)
			if (index == -1) {
				tag.id = epcList.length
				if (page_state.dataList.length < offset) {
					page_state.dataList.push(tag)
				}
				tempList.push(tag)
				epcList.push(epc)
			} else {
				tag.id = index
				tag.count = tempList[index].count + 1
				if (index < page_state.dataList.length) {
					page_state.dataList.splice(index, 1, tag)
				}
				tempList.splice(index, 1, tag)
			}
		}
		oldEpc.value = tempList[0].epc
		page_state.tagsAmount = epcList.length
		
		try {
			const writeResult = await write_test();
			
			if(writeResult){
				const epc = epc.value
				const message = {
				  type: 'Package',
				  data: epc
				}
				
				uni.sendSocketMessage({
				  data: JSON.stringify(message),
				  success: () => {
					console.log('s:', epc)
				  },
				  fail: (err) => {
					console.error('f:', err)
				  }
				})
				
			}
		} catch (error) {
			console.error('Error during write_test:', error);
		}
	}
	
	
	onLoad(() => {
		action.value = getApp().globalData.status
		
		uni.onSocketOpen(() => {
		  console.log('query connet success')
		})
		
		socketTask = uni.connectSocket({
		  url: 'ws://192.168.61.104:3333',
		  header: {
		    'content-type': 'application/json'
		  },
		  protocols: ['protocol1'],
		  method: 'GET'
		});
		
		uni.onSocketMessage((res) => {
			console.log('onSocketMessage', res.data)
		})
		uni.onSocketOpen(function(res) {
			console.log('WebSocket 連線成功');
		
			const message = {
			  type: 'testMessage',
			  data: '連線測試....'
			};
		
			uni.sendSocketMessage({
			  data: JSON.stringify(message), 
			  success: () => {
				uni.showToast({
					title: 'conect server success',
					icon: "success",
					duration: 1000
				});
			  },
			  fail: (err) => {
				uni.showToast({
					title: 'conect server fail',
					icon: "fail",
					duration: 1000
				});
			  }
			});
		});
		
		globalEvent.addEventListener('uhf_tag_event', async function(e) {
			if(page_state.dataList.length > 0) {
				return 
			}
			var result = e.tag_info_list
			if (result == null) {
				var event = e.inventory_event
				if (event == "stopInventory") {
					uni.showToast({
						title: "stop",
						icon: "none"
					})
					page_state.btn2Disabled = false
					page_state.btn3Disabled = false
					page_state.cbDisabled = false
					page_state.btn1Info = "開始掃描"
				}
				return
			}
			
			if(result.length > 1){
				page_state.dataList = []
				uni.showToast({
					title: "There are too many labels, please rescan",
					icon: "none",
					duration: 3000
				})
				return
			}
			
			for (var i = 0; i < 1; i++) {
				var id = i
				var epc = bytes2HexString(result[i].EpcId)
				var rssi = result[i].RSSI 
				var tag = {
					id: id,
					epc: epc,
					count: 1,
					rssi: rssi,
				}
				var index = epcList.indexOf(epc)
				if (index == -1) {
					tag.id = epcList.length
					if (page_state.dataList.length < offset) {
						page_state.dataList.push(tag)
					}
					tempList.push(tag)
					epcList.push(epc)
				} else {
					tag.id = index
					tag.count = tempList[index].count + 1
					if (index < page_state.dataList.length) {
						page_state.dataList.splice(index, 1, tag)
					}
					tempList.splice(index, 1, tag)
				}
			}
			oldEpc.value = tempList[0].epc
			page_state.tagsAmount = epcList.length
			
			try {
				const writeResult = await write_test();
				
				if(writeResult){
					const epc = epc.value
					const message = {
					  type: 'Package',
					  data: epc
					}
					
					uni.sendSocketMessage({
					  data: JSON.stringify(message),
					  success: () => {
						console.log('s:', epc)
					  },
					  fail: (err) => {
						console.error('f:', err)
					  }
					})
					
				}
			} catch (error) {
				console.error('Error during write_test:', error);
			}
			
		})
	})
	
	const epc = ref("")
	const oldEpc = ref("")
	
	const removeEventListener = () => {
		globalEvent.removeEventListener('uhf_tag_event', function(){});
	}
	const exit = () => {
		main.unregisterReceiver(receiver)
		stopInventory()
		removeEventListener()
	}

	onShow(() => {
		
		var IntentFilter = plus.android.importClass('android.content.IntentFilter')
		var filter = new IntentFilter()
		filter.addAction("android.rfid.FUN_KEY")
		
		receiver = plus.android.implements('io.dcloud.feature.internal.reflect.BroadcastReceiver', {
			onReceive: function(context, intent) {
				
				plus.android.importClass(intent)
				const code = intent.getIntExtra("keyCode", 0)
				const keyDown = intent.getBooleanExtra("keydown", false)
				
				if (keyDown && keyDownTime.value == 1 && code == 134) {
					inventory()
					keyDownTime.value += 1;
				} else if (!keyDown) {
					inventory()
					keyDownTime.value = 1;
				}
			}
		})
		main.registerReceiver(receiver, filter)
	})
	
	onHide(() => {
		exit()
	})
	
	onBackPress(() => {
		exit()
	})
	
	function bytes2HexString(byteArray) {
		return Array.from(byteArray, function(byte) {
			return ('0' + (byte & 0xFF).toString(16)).slice(-2)
		}).join('')
	}
	
	function inventory() {
		stopInventory()
		
		uni.scanCode({
			scanType: ['barCode'],
			success: (res) => {
				epc.value = res.result
				startInventory()
			},
			fail: (err) => {
			  console.error('write teg failed', err);
			  uni.showToast({
			  	title: 'Write Failures',
			  	icon: "error",
			  	duration: 1000
			  });
			}
		});
	}
	
	function stopInventory() {
		hhwUHFController.stopInventory(true)
	}
	
	var data = "3600"
	function clear() {
		page_state.dataList = []
		tempList = []
		epcList = []
		page_state.tagsAmount = 0
		offset = 50
	}
	
	function startInventory() {
		clear()
		page_state.btn2Disabled = true
		page_state.btn3Disabled = true
		page_state.cbDisabled = true
		page_state.btn1Info = "停止盘点"
		// hhwUHFController.setCancleInventoryFilter();
		
		return hhwUHFController.startInventory(5,1, false, 1000, voice_flag, result => {
			return result
		})	
	}
	
	const selectedItemId = ref()
	const packageResult = ref("")

	async function write_test () {
		const test = `${epc.value}8901234424242424`

		 return new Promise((resolve, reject) => {
			hhwUHFController.writeTagEPCByFilter(test, '00000000', 1000, oldEpc.value, 1, 2, true, result => {
				packageResult.value = result;
	
				if (result) {
					resolve(result); 
				} else {
					reject(new Error('Write failed')); 
				}
			});
		});
		
	}

	const scrollTop = ref(0)
	
</script>
<style scoped>
	.list {
		flex: 1;
		background-color: #ebebeb;
	}
	
	.list-item-head {
		display: flex;
		flex-direction: row;
		background-color: #fff;
	}
	
	.list-item {
		display: flex;
		flex-direction: row;
		background-color: #fff;
	}
	
	.list-item-text-id {
		width: 65px;
		padding-left: 5px;
		padding-right: 5px;
		padding-top: 8px;
		padding-bottom: 8px;
		font-size: 16px;
	}
	
	.list-item-text-epc {
		width: 227px;
		padding-left: 5px;
		padding-right: 5px;
		padding-top: 8px;
		padding-bottom: 8px;
		font-size: 16px;
	}
	
	.list-item-text-count {
		width: 65px;
		padding-left: 5px;
		padding-right: 5px;
		padding-top: 8px;
		padding-bottom: 8px;
		font-size: 16px;
	}
	
	.list-item-text-rssi {
		width: 40px;
		padding-left: 5px;
		padding-right: 5px;
		padding-top: 8px;
		padding-bottom: 8px;
		font-size: 16px;
	}
	
	.btn-box {
		display: flex;
		flex-direction: row;
		background-color: #fff;
		padding-bottom: 5px;
		padding-left: 5px;
		padding-right: 5px;
		align-items: center;
	}
	
	.scroll-Y {
		height: 130rpx;
	}
	
	
	.ctx-list {
		flex: 1;
		background-color: #ebebeb;
	}
	
	.ctx-list-item-head {
		display: flex;
		flex-direction: row;
		background-color: #fff;
	}
	
	.ctx-list-item {
		display: flex;
		flex-direction: row;
		background-color: #fff;
	}
	
	.ctx-list-item-text-pallet {
		width: 65px;
		padding-left: 5px;
		padding-right: 5px;
		padding-top: 8px;
		padding-bottom: 8px;
		font-size: 16px;
	}
	
	.ctx-list-item-text-order {
		width: 85px;
		padding-left: 5px;
		padding-right: 5px;
		padding-top: 8px;
		padding-bottom: 8px;
		font-size: 16px;
	}
	
	.ctx-list-item-text-product {
		width: 100px;
		padding-left: 5px;
		padding-right: 5px;
		padding-top: 8px;
		padding-bottom: 8px;
		font-size: 16px;
	}
	
	
	.ctx-list-item-text-quantity {
		width: 80px;
		padding-left: 5px;
		padding-right: 5px;
		padding-top: 8px;
		padding-bottom: 8px;
		font-size: 16px;
	}
	
	.ctx-list-item-text-nob {
		width: 80px;
		padding-left: 5px;
		padding-right: 5px;
		padding-top: 8px;
		padding-bottom: 8px;
		font-size: 16px;
	}
	
	.ctx-scroll-Y {
		height: 670rpx;
	}
	
	.line{
		width: 410px;
		background-color: #9e9e9e;
		padding: 5px 15px;
		text-align: center
		
	}
</style>
